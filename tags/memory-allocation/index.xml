<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memory Allocation on Technical Solutions for the 10X Engineers</title><link>https://shitops.de/tags/memory-allocation/</link><description>Recent content in Memory Allocation on Technical Solutions for the 10X Engineers</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 28 May 2023 18:05:46 +0000</lastBuildDate><atom:link href="https://shitops.de/tags/memory-allocation/index.xml" rel="self" type="application/rss+xml"/><item><title>Revolutionizing Memory Allocation with Traefik and Glue</title><link>https://shitops.de/posts/revolutionizing-memory-allocation-with-traefik-and-glue/</link><pubDate>Sun, 28 May 2023 18:05:46 +0000</pubDate><guid>https://shitops.de/posts/revolutionizing-memory-allocation-with-traefik-and-glue/</guid><description>Introduction As engineers, we are always looking for ways to optimize our systems. One area that is often overlooked is memory allocation. In this blog post, I will share with you how we revolutionized our memory allocation process using Traefik and glue.
The Problem Our company, ShitOps, was facing major performance issues due to inefficient memory allocation. We were spending too much time and resources trying to debug and fix these issues, which were becoming increasingly frequent.</description></item></channel></rss>