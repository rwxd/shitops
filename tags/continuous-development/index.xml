<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Continuous Development on Technical Solutions for the 10X Engineers</title><link>https://shitops.de/tags/continuous-development/</link><description>Recent content in Continuous Development on Technical Solutions for the 10X Engineers</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 17 Jan 2024 00:10:11 +0000</lastBuildDate><atom:link href="https://shitops.de/tags/continuous-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Integrating Machine Learning with Continuous Development for Optimal Wayland Performance in ShitOps Tech Company</title><link>https://shitops.de/posts/integrating-machine-learning-with-continuous-development-for-optimal-wayland-performance-in-shitops-tech-company/</link><pubDate>Wed, 17 Jan 2024 00:10:11 +0000</pubDate><guid>https://shitops.de/posts/integrating-machine-learning-with-continuous-development-for-optimal-wayland-performance-in-shitops-tech-company/</guid><description>Listen to the interview with our engineer: Introduction Welcome back to another blog post on the engineering capabilities at ShitOps Tech Company! In today&amp;rsquo;s article, we will explore a truly revolutionary solution to improve Wayland performance by integrating machine learning techniques into our continuous development workflow. But before diving into the details, let&amp;rsquo;s first understand the problem we are trying to solve.
The Problem: Suboptimal Wayland Performance In 2017, Wayland was introduced as the next-generation display server protocol, promising improved graphical performance and more secure communication between applications and the graphical display.</description></item></channel></rss>