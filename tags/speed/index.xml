<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Speed on Technical Solutions for the 10X Engineers</title><link>https://shitops.de/tags/speed/</link><description>Recent content in Speed on Technical Solutions for the 10X Engineers</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 23 Oct 2024 00:12:33 +0000</lastBuildDate><atom:link href="https://shitops.de/tags/speed/index.xml" rel="self" type="application/rss+xml"/><item><title>Optimizing Data Transfer Speed with Dockerized Rsync and Lambda Functions</title><link>https://shitops.de/posts/optimizing-data-transfer-speed-with-dockerized-rsync-and-lambda-functions/</link><pubDate>Wed, 23 Oct 2024 00:12:33 +0000</pubDate><guid>https://shitops.de/posts/optimizing-data-transfer-speed-with-dockerized-rsync-and-lambda-functions/</guid><description>&lt;p>Listen to the interview with our engineer: &lt;figure class="audio">
&lt;audio controls preload="metadata">
&lt;source src="https://s3.chaops.de/shitops/podcasts/optimizing-data-transfer-speed-with-dockerized-rsync-and-lambda-functions.mp3" type="audio/mpeg">

&lt;/audio>
&lt;/figure>
&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Welcome back to the ShitOps engineering blog, where we dive deep into solving complex technical challenges with cutting-edge solutions. In today&amp;rsquo;s post, we&amp;rsquo;ll explore how we can optimize data transfer speed using a combination of Dockerized Rsync and serverless Lambda functions.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>At ShitOps, we often encounter the need to transfer large amounts of data between servers in different regions. Traditional methods of transferring data, such as SCP or FTP, are not efficient enough for our needs. We require a solution that can handle concurrent transfers, ensure data integrity, and scale seamlessly with our growing infrastructure.&lt;/p></description></item></channel></rss>